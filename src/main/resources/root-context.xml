<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"

	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	
	<!-- Root Context: defines shared resources visible to all other web components -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"  destroy-method="close">
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"/>
		<property name="url" value="jdbc:oracle:thin:@localhost:1521:xe" />
		<property name="username" value="deahan"/>
		<property name="password" value="deahan"/>

		<property name="defaultAutoCommit" value="false"/>
	</bean>
	
	<!-- 트랜잭션 처리(commit/rollback) -->
	<!-- JDBC : Connection 객체
		 MyBatis : SqlSession 객체
		 Spring : TransactionManager 객체 -->
	<!-- 트랜잭션 처리를 위한 트랜잭션 매니저 추가 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>
	
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 이전에 작성했던 mybatis-config.xml 설정 불러 들이기 -->
		<property name="configLocation" value="classpath:mybatis-config.xml"/>
		<property name="dataSource" ref="dataSource"/>
	</bean>
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSession"/>
	</bean>	

   
	<!-- 
		bean 등록 시
		property 태그를 통해서 한다면 => setter DI
		constructor-arg 태그를 통해서 한다면 => 생성자 DI
	 -->
	 
	  <!-- 트랜잭션 매니저 추가 후 namespace에서 tx(Transaction) 추가 -->
    <!-- AOP를 이용한 선언적인 방식의 트랜잭션 -->
    <!-- Advisor 생성 -->
	 <tx:advice id="txAdvice" transaction-manager="transactionManager">
	 	<tx:attributes>
	 		<tx:method name="select*" read-only="true" rollback-for="Exception"/>
	 		<tx:method name="insert*" rollback-for="Exception"/>
	 		<tx:method name="update*" rollback-for="Exception"/>
	 		<tx:method name="delete*" rollback-for="Exception"/>
	 	</tx:attributes>
	 </tx:advice>
	 
	 
	 <!-- 명시적 어노테이션 방법
	 	@Transactionc"E:/work/kh-study/final-project/buylocal/workspace/BEFORE/새 폴더/final_buylocal2/src/main/resources/mappers/user"al(rollbackFor = Exception.class) 등의 어노테이션으로 적용 -->
	 <tx:annotation-driven/> <!-- 반드시 추가되어 있어야 자동으로 어노테이션 등록 가능 -->
	 
	 <!-- 2. 파일 업로드 시 사용하는 multipartEesolver 빈 등록 -->
	 <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
	 	<property name="maxUploadSize" value="100000000"/>
	 	<property name="maxInMemorySize" value="100000000"/>
	 </bean>

</beans>